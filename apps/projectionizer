#!/usr/bin/env python
from __future__ import print_function

"""
You can run this example like this:
    .. code:: console
            $ luigi --module examples.hello_world examples.HelloWorldTask --local-scheduler
If that does not work, see :ref:`CommandLine`.
"""
import argparse
import json
import logging
import os
import shutil
import sys
from builtins import input

import luigi
import numpy as np
import yaml

from projectionizer.luigi_utils import TEMPLATES_PATH

L = logging.getLogger(__name__)
L.setLevel(logging.INFO)

CONFIG_FILENAME = "config.yaml"
LUIGI_TARGET = "projectionizer.analysis"
VOLUME_TRANSMISSION_TASKS = {"ScaleConductance", "VolumeSample"}
WORKERS = "1"


def common_parser():
    """return the argument parser"""

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='Location of "templates/" path: %s' % TEMPLATES_PATH,
    )
    subparsers = parser.add_subparsers(help="sub-command help", dest="sub-command", required=True)

    def set_scheduler_arg(_parser):
        _parser.add_argument(
            "-l",
            "--no-local-scheduler",
            action="store_true",
            help="Do not use the luigi local scheduler " "(luigi daemon (luigid) must be running)",
        )

    def set_common_args(_parser):
        set_scheduler_arg(_parser)
        _parser.add_argument("-o", "--output", help="Output directory", required=True)

    def set_config_args(_parser):
        set_common_args(_parser)
        _parser.add_argument(
            "-p", "--circuit-config", default=None, help="Override the circuit config path"
        )
        _parser.add_argument(
            "-c",
            "--config",
            help=(
                "The projectionizer YAML config file. "
                "Must be passed when running the analysis for "
                "the first time. See templates/ path for "
                "some examples"
            ),
        )
        _parser.add_argument(
            "--resume",
            action="store_true",
            help=(
                f"Resume the execution of the workflow "
                f"(if output directory exists). Requires a {CONFIG_FILENAME} "
                f"to be present in the output diretory"
            ),
        )
        _parser.add_argument(
            "--overwrite",
            action="store_true",
            help=("Remove existing data and restart the workflow " "(if output directory exists)"),
        )

    def set_fiber_args(_parser):
        set_scheduler_arg(_parser)
        _parser.add_argument(
            "-c", "--config", required=True, help="The projectionizer YAML config file"
        )
        _parser.add_argument("-n", "--n-fibers", help="Count of fibers to create")
        _parser.add_argument(
            "-o",
            "--out-file",
            default="fibers.csv",
            help="File name for the CSV containing fiber positions.",
        )

    parser_start = subparsers.add_parser("start", help="Generate new projections from scratch")
    parser_start.set_defaults(which="start")
    set_config_args(parser_start)

    parser_resume = subparsers.add_parser(
        "resume",
        help=(
            (
                f"Resume a projection job (requires a {CONFIG_FILENAME} "
                f"file to be present in the output directory)"
            )
        ),
    )

    parser_resume.set_defaults(which="resume")
    set_common_args(parser_resume)

    parser_dichotomy = subparsers.add_parser(
        "dichotomy",
        help=(
            "Run the dichotomy algorithm that will generate projections until "
            "they match the target mean connectivity "
            "(number of synapses per connections) for L4 PC cells"
        ),
    )
    parser_dichotomy.set_defaults(which="dichotomy")
    set_config_args(parser_dichotomy)
    parser_dichotomy.add_argument(
        "-t",
        "--connectivity-target",
        required=True,
        help="Number of synapses per connection to reach with the dichotomy",
    )
    parser_dichotomy.add_argument(
        "-s", "--min-param", required=True, help="Starting range of the dichotomy"
    )
    parser_dichotomy.add_argument(
        "-e", "--max-param", required=True, help="End range of the dichotomy"
    )
    parser_dichotomy.add_argument(
        "-m", "--target-margin", required=True, help="Tolerance of the dichotomy"
    )

    parser_fibers = subparsers.add_parser(
        "generate-fibers", help="Generate the fiber locations CSV file."
    )
    parser_fibers.set_defaults(which="generate-fibers")
    set_fiber_args(parser_fibers)

    parser_hex_fibers = subparsers.add_parser(
        "generate-fibers-hex", help="Generate the fiber locations CSV file for microcolumns."
    )
    parser_hex_fibers.set_defaults(which="generate-fibers-hex")
    set_fiber_args(parser_hex_fibers)

    parser_hex_fibers.add_argument(
        "-v", "--v_direction", default="1.0", help="Direction for v, either 1.0 or -1.0."
    )
    parser_hex_fibers.add_argument(
        "-y", "--y_level", default="0.0", help="y plane in which to place fiber positions"
    )

    parser_volume_transmission = subparsers.add_parser(
        "volume-transmission",
        help=("Run a volume transmission projections job. This will also run the main workflow."),
    )
    parser_volume_transmission.set_defaults(which="volume-transmission")
    set_config_args(parser_volume_transmission)

    return parser


def load_config(path):
    """load a yaml config"""
    with open(path) as input_config:
        config = yaml.load(input_config, Loader=yaml.FullLoader)
    return config


def luigi_params(args, skip_vt_tasks=True):
    """Prepare the list of parameters to be passed to luigi.run command"""
    cmd = ["--log-level", "INFO"]

    if not args.no_local_scheduler:
        cmd.append("--local-scheduler")
    config = load_config(os.path.join(args.output, CONFIG_FILENAME))

    for task, options in config.items():
        if skip_vt_tasks and task in VOLUME_TRANSMISSION_TASKS:
            continue
        for option, value in options.items():
            prefix = task + "-" if task != "CommonParams" else ""
            if isinstance(value, (dict, list)):
                value = json.dumps(value)
            else:
                value = str(value)

            cmd += ["--" + prefix + option.replace("_", "-"), value]

    return cmd


def _copy_config(args):
    """Prepare and write config in the output directory"""
    config_path = os.path.join(args.output, CONFIG_FILENAME)

    assert not os.path.exists(
        config_path
    ), "Output folder already contains a file named {}. Delete it first.".format(CONFIG_FILENAME)

    try:
        os.makedirs(args.output)
    except:
        pass

    config = load_config(args.config)

    if args.circuit_config:
        config["CommonParams"]["circuit_config"] = args.circuit_config

    L.debug("Copying the config in the output directory: %s", args.output)
    with open(config_path, "w") as output_configfile:
        yaml.dump(config, output_configfile, default_flow_style=False)

    return config_path


def _check_outdir(args):
    """Check for existance of ouput directory and ask what to do"""
    if os.path.exists(args.output):
        if ARGS.resume:
            return
        elif ARGS.overwrite:
            shutil.rmtree(args.output)
        else:
            L.critical(
                (
                    "\nerror: Output folder already exists.\n\n"
                    "Tip: use --overwrite or --resume (for more info, see -h/--help)"
                )
            )
            sys.exit(0)

    _copy_config(args)


def _cmd_start(args):
    """Luigi argument list for the "start" command"""
    _check_outdir(args)
    return [
        "DoAll",
        "--folder",
        args.output,
        "--module",
        LUIGI_TARGET,
        "--workers",
        WORKERS,
    ] + luigi_params(args)


def _cmd_resume(args):
    """Luigi argument list for the "resume" command"""
    return [
        "DoAll",
        "--folder",
        args.output,
        "--module",
        LUIGI_TARGET,
        "--workers",
        WORKERS,
    ] + luigi_params(args)


def _cmd_dichotomy(args):
    """Luigi argument list for the "dichotomy" command"""
    load_config(_copy_config(args))
    return [
        "SynapseCountMeanMinimizer",
        "--folder",
        args.output,
        "--module",
        "projectionizer.dichotomy",
        "--workers",
        WORKERS,
        "--SynapseCountMeanMinimizer-target",
        args.connectivity_target,
        "--SynapseCountMeanMinimizer-min-param",
        args.min_param,
        "--SynapseCountMeanMinimizer-max-param",
        args.max_param,
        "--SynapseCountMeanMinimizer-target-margin",
        args.target_margin,
    ] + luigi_params(args)


def _cmd_generate_fibers(args):
    """Luigi argument list for the "generate-fibers" command"""
    config = load_config(args.config)
    cmd = [
        "GenerateFibers",
        "--out-file",
        args.out_file,
        "--circuit-config",
        config["CommonParams"]["circuit_config"],
        "--regions",
        json.dumps(config["CommonParams"]["regions"]),
        "--module",
        "projectionizer.fiber_simulation",
        "--workers",
        WORKERS,
    ]

    if args.n_fibers:
        cmd.extend(["--n-fibers", args.n_fibers])

    if not args.no_local_scheduler:
        cmd.append("--local-scheduler")

    return cmd


def _cmd_generate_fibers_hex(args):
    """Luigi argument list for the "generate-fibers-hex" command"""
    config = load_config(args.config)
    cmd = _cmd_generate_fibers(args)
    cmd.extend(
        [
            "--use-kmeans",
            "--bounding-rectangle",
            json.dumps(config["CommonParams"].get("bounding_rectangle", [])),
        ]
    )

    if args.y_level:
        cmd.extend(["--y-level", args.y_level])

    if args.y_level:
        cmd.extend(["--v-direction", args.v_direction])

    return cmd


def _cmd_volume_transmission(args):
    """Luigi argument list for the "volume-transmission" command."""
    _check_outdir(args)
    return [
        "VolumeWriteAll",
        "--folder",
        args.output,
        "--module",
        "projectionizer.volume_transmission",
        "--workers",
        WORKERS,
    ] + luigi_params(args, skip_vt_tasks=False)


if __name__ == "__main__":
    parser = common_parser()
    ARGS = parser.parse_args()
    if ARGS.which not in ("resume", "generate-fibers", "generate-fibers-hex"):
        if not (ARGS.config or ARGS.resume):
            L.critical(
                "\nerror: argument -c/--config is required\n\nTip: example "
                "templates configuration files can be found in:\n\t%s",
                TEMPLATES_PATH,
            )
            sys.exit(-1)
        if hasattr(ARGS, "config") and ARGS.resume and ARGS.overwrite:
            L.critical("\nerror: arguments --overwrite and --resume are mutually exclusive")
            sys.exit(-1)

    cmd = {
        "start": _cmd_start,
        "resume": _cmd_resume,
        "dichotomy": _cmd_dichotomy,
        "generate-fibers": _cmd_generate_fibers,
        "generate-fibers-hex": _cmd_generate_fibers_hex,
        "volume-transmission": _cmd_volume_transmission,
    }[ARGS.which](ARGS)

    msg = "You can also start the job with the following command:\nluigi "
    for line in cmd:
        line = line.strip()
        if line.startswith("--"):
            msg += " \\\n    "
        else:
            line = '"{}"'.format(str(line))
        msg += "    " + line
    L.info(f"{msg}\n")

    np.random.seed(0)
    luigi.run(cmd)
