#!/usr/bin/env python
from __future__ import print_function
"""
You can run this example like this:
    .. code:: console
            $ luigi --module examples.hello_world examples.HelloWorldTask --local-scheduler
If that does not work, see :ref:`CommandLine`.
"""
from builtins import input

import argparse
import logging
import numpy
import os
import shutil
import sys

import luigi
import yaml

L = logging.getLogger(__name__)

CONFIG_FILENAME = 'config.yaml'
LUIGI_TARGET = 'projectionizer.analysis'


def common_parser():
    '''return the argument parser'''
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')

    def set_common_args(_parser):
        _parser.add_argument('-l', '--no-local-scheduler',  action='store_true',
                             help='Do not use the luigi local scheduler '
                             '(luigi daemon (luigid) must be running)')
        _parser.add_argument('-o', '--output',
                             help='Output directory', required=True)

    def set_config_args(_parser):
        set_common_args(_parser)
        _parser.add_argument('-p', '--circuit-config', default=None,
                             help='Override the circuit config path')
        _parser.add_argument('-c', '--config',  required=True,
                             help=('The projectionizer YAML config file. '
                                   'Must be passed when running the analysis for '
                                   'the first time. See templates/ folder for '
                                   'some examples'))

    parser_start = subparsers.add_parser('start',
                                         help='Generate new projections from scratch')
    parser_start.set_defaults(which='start')
    set_config_args(parser_start)

    parser_resume = subparsers.add_parser(
        'resume',
        help=('Resume a projection job (requires a {} file to be present in the output directory)'
              .format(CONFIG_FILENAME)))

    parser_resume.set_defaults(which='resume')
    set_common_args(parser_resume)

    parser_dichotomy = subparsers.add_parser(
        'dichotomy',
        help=('Run the dichotomy algorithm that will generate projections until '
              'they match the target mean connectivity '
              '(number of synapses per connections) for L4 PC cells'))
    parser_dichotomy.set_defaults(which='dichotomy')
    set_config_args(parser_dichotomy)
    parser_dichotomy.add_argument(
        '-t', '--connectivity-target', required=True,
        help='Number of synpase per connection to reach with the dichotomy')
    parser_dichotomy.add_argument('-s', '--min-param', required=True,
                                  help='Starting range of the dichotomy')
    parser_dichotomy.add_argument('-e', '--max-param', required=True,
                                  help='End range of the dichotomy')
    parser_dichotomy.add_argument('-m', '--target-margin', required=True,
                                  help='Tolerance of the dichotomy')

    return parser


def luigi_params(args):
    '''Prepare the list of parameters to be passed to luigi.run command'''
    cmd = ['--log-level', 'INFO']

    if not args.no_local_scheduler:
        cmd.append('--local-scheduler')

    with open(os.path.join(args.output, CONFIG_FILENAME)) as input_config:
        config_list = yaml.load(input_config)
    for task, options in config_list.items():
        for option, value in options.items():
            prefix = task + '-' if task != 'CommonParams' else ''
            cmd += ['--' + prefix + option.replace('_', '-'), str(value)]

    return cmd


def _copy_config(args):
    '''Prepare and write config in the output directory'''
    config = os.path.join(args.output, CONFIG_FILENAME)

    assert not os.path.exists(config), \
        ('Output folder already contains a file named {}. Delete it first.'
         .format(CONFIG_FILENAME))

    try:
        os.makedirs(args.output)
    except:
        pass

    with open(args.config) as input_configfile:
        config_list = yaml.load(input_configfile)
        if args.circuit_config:
            config_list['CommonParams']['circuit_config'] = args.circuit_config

    L.debug('Copying the config in the output directory: %s', args.output)
    with open(config, 'w') as output_configfile:
        yaml.dump(config_list, output_configfile, default_flow_style=False)


def _cmd_start(args):
    '''Luigi argument list for the "start" command'''
    if os.path.exists(args.output):
        if input("Output folder already exists. Overwrite (yes/no): ").lower() in ('y', 'yes'):
            shutil.rmtree(args.output)
        else:
            sys.exit(0)
    _copy_config(args)
    return ['DoAll', '--folder', args.output, '--module',
            LUIGI_TARGET, '--workers', '1', ] + luigi_params(args)


def _cmd_resume(args):
    '''Luigi argument list for the "resume" command'''
    return ['DoAll', '--folder', args.output, '--module',
            LUIGI_TARGET, '--workers', '1', ] + luigi_params(args)


def _cmd_dichotomy(args):
    '''Luigi argument list for the "dichotomy" command'''
    _copy_config(args)
    return (['SynapseCountL4PCMeanMinimizer', '--folder', args.output, '--module',
             'projectionizer.dichotomy', '--workers', '1',
             '--SynapseCountL4PCMeanMinimizer-target', args.connectivity_target,
             '--SynapseCountL4PCMeanMinimizer-min-param', args.min_param,
             '--SynapseCountL4PCMeanMinimizer-max-param', args.max_param,
             '--SynapseCountL4PCMeanMinimizer-target-margin', args.target_margin] +
            luigi_params(args))


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    parser = common_parser()
    ARGS = parser.parse_args()

    cmd = {'start': _cmd_start,
           'resume': _cmd_resume,
           'dichotomy': _cmd_dichotomy}[ARGS.which](ARGS)

    print('You can also start the job with the following command:')
    for line in cmd:
        line = line.strip()
        if line.startswith('--'):
            print(' \\\n    ', end='')
        else:
            line = '"{}"'.format(str(line))
        print('    ' + line, end='')
    print()

    numpy.random.seed(0)
    luigi.run(cmd)
