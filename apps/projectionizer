#!/usr/bin/env python
import json
import logging
import multiprocessing
import pathlib
import shutil

import click
import luigi
import numpy as np
import yaml

from projectionizer.version import VERSION

L = logging.getLogger(__name__)
L.setLevel(logging.INFO)

WORKERS = 1
CONFIG_FILENAME = "config.yaml"
CLICK_PATH_KWARGS = {"resolve_path": True, "readable": True, "path_type": pathlib.Path}

CONFIG_OPTION = click.option(
    "-c",
    "--config",
    required=True,
    type=click.Path(exists=True, dir_okay=False, **CLICK_PATH_KWARGS),
    help=(
        "The projectionizer YAML config file. Must be passed when running the analysis for "
        "the first time. See templates/ path for some examples"
    ),
)


OUTDIR_OPTION = click.option(
    "-o",
    "--output",
    type=click.Path(writable=True, file_okay=False, **CLICK_PATH_KWARGS),
    help="Output directory",
    required=True,
)

PROJECTIONS_OPTIONS = [
    CONFIG_OPTION,
    OUTDIR_OPTION,
    click.option(
        "--resume",
        is_flag=True,
        help="Resume the execution of the workflow (if output directory exists).",
    ),
    click.option(
        "--overwrite",
        is_flag=True,
        help="Remove existing data (if output directory exists) and restart the workflow.",
    ),
]

DICHOTOMY_OPTIONS = [
    CONFIG_OPTION,
    OUTDIR_OPTION,
    click.option(
        "-t",
        "--connectivity-target",
        type=float,
        required=True,
        help="Number of synapses per connection to reach with the dichotomy",
    ),
    click.option(
        "-s", "--min-param", type=float, required=True, help="Starting range of the dichotomy"
    ),
    click.option("-e", "--max-param", type=float, required=True, help="End range of the dichotomy"),
    click.option(
        "-m", "--target-margin", type=float, required=True, help="Tolerance of the dichotomy"
    ),
]

FIBER_OPTIONS = [
    CONFIG_OPTION,
    click.option("-n", "--n-fibers", type=int, required=True, help="Count of fibers to create"),
    click.option(
        "-o",
        "--out-file",
        type=click.Path(**CLICK_PATH_KWARGS),
        default="fibers.csv",
        help="File name for the CSV containing fiber positions.",
        show_default=True,
    ),
]

FIBER_HEX_OPTIONS = [
    *FIBER_OPTIONS,
    click.option(
        "-v",
        "--v_direction",
        type=float,
        default=1.0,
        help="Y-wise direction of the fiber, either 1.0 or -1.0.",
        show_default=True,
    ),
    click.option(
        "-y",
        "--y_level",
        type=float,
        default=0.0,
        help="y plane in which to place fiber positions",
        show_default=True,
    ),
]


def load_config(path):
    """Loads a yaml config"""
    return yaml.load(path.read_text(), Loader=yaml.FullLoader)


def setup_luigi_config(config):
    """Updates the task parameters to the luigi workflow configuration."""
    # This is required as luigi expects the task parameter values to be in json format
    jsonfied_config = {
        task: {param: json.dumps(value) for param, value in task_dict.items()}
        for task, task_dict in config.items()
    }

    luigi.configuration.get_config().update(jsonfied_config)


def setup_projection_workflow(output, config, resume=False, overwrite=False, **_):
    """Prepare a workflow that is expected to produce projections.

    Performs some checks on the commandline arguments, creates the output directory, copies the
    config file to it, and sets up the luigi configuration.
    """
    if resume and overwrite:
        raise click.UsageError("Options '--resume' and '--overwrite' are mutually exclusive.")

    if output.exists():
        if overwrite:
            shutil.rmtree(output)
        elif not resume:
            raise click.UsageError(f"Output folder {output} already exists.")

    output.mkdir(parents=True, exist_ok=True)

    out_config_path = output / CONFIG_FILENAME
    new_config = load_config(config)

    if not out_config_path.exists():
        L.debug("Copying the config in the output directory: %s", output)
        out_config_path.write_text(yaml.dump(new_config, default_flow_style=False))
    elif load_config(out_config_path) != new_config:
        raise click.UsageError(
            f"Configuration file {config} differs from {out_config_path}. "
            "Please start a new run or overwrite the existing one."
        )

    setup_luigi_config(new_config)


def check_fiber_task_args(out_file, v_direction=None, **_):
    if v_direction is not None and abs(v_direction) != 1:
        raise click.UsageError(f"'v_direction' must be either -1.0 or 1.0, given: {v_direction}")
    if out_file.exists():
        raise click.UsageError(f"Output file {out_file} already exists.")


def get_projection_task_params(cmd_opts):
    """Gets task parameters for a task generating projections."""
    output_path = cmd_opts["output"]
    config_file = load_config(output_path / CONFIG_FILENAME)
    return {
        "folder": output_path,
        **config_file["CommonParams"],
        **config_file.get("WriteSonata", {}),
    }


def get_dichotomy_task_params(cmd_opts):
    """Gets task parameters for a dichotomy task."""
    task_params = get_projection_task_params(cmd_opts)
    task_params["target"] = cmd_opts["connectivity_target"]
    task_params["min_param"] = cmd_opts["min_param"]
    task_params["max_param"] = cmd_opts["max_param"]
    task_params["target_margin"] = cmd_opts["target_margin"]

    return task_params


def get_fiber_task_params(cmd_opts):
    """Gets task parameters for a task generating fiber locations."""
    config_file = load_config(cmd_opts["config"])
    task_params = {k: v for k, v in cmd_opts.items() if k != "config"}
    task_params["circuit_config"] = config_file["CommonParams"]["circuit_config"]
    task_params["regions"] = config_file["CommonParams"]["regions"]

    return task_params


def add_click_options(options):
    """Adds commandline options to click."""

    def _add_options(func):
        for option in reversed(options):
            func = option(func)
        return func

    return _add_options


@click.group()
@click.version_option(VERSION)
@click.option("-v", "--verbose", default=1, count=True)
@click.option("-l", "--no-local-scheduler", is_flag=True, help="Do not use a local luigi scheduler")
@click.pass_context
def cli(ctx, verbose, no_local_scheduler):
    L.setLevel((logging.WARNING, logging.INFO, logging.DEBUG)[min(verbose, 2)])
    if verbose > 3:
        import multiprocessing.util  # pylint: disable=import-outside-toplevel

        multiprocessing.util.log_to_stderr(logging.DEBUG)

    ctx.obj["local_scheduler"] = not no_local_scheduler

    def _task_runner(task):
        np.random.seed(0)
        return luigi.build(
            [task],
            workers=WORKERS,
            local_scheduler=ctx.obj["local_scheduler"],
            log_level="INFO",
        )

    ctx.obj["workflow_runner"] = _task_runner


@cli.command()
@add_click_options(FIBER_OPTIONS)
@click.pass_context
def generate_fibers(ctx, **cmd_opts):
    """Generate the fiber locations CSV file."""
    from projectionizer.fiber_simulation import GenerateFibers

    check_fiber_task_args(**cmd_opts)
    task = GenerateFibers(**get_fiber_task_params(cmd_opts))
    ctx.obj["workflow_runner"](task)


@cli.command()
@add_click_options(FIBER_HEX_OPTIONS)
@click.pass_context
def generate_fibers_hex(ctx, **cmd_opts):
    """Generate the fiber locations for a microcolumn."""
    from projectionizer.fiber_simulation import GenerateFibersHex

    check_fiber_task_args(**cmd_opts)
    task = GenerateFibersHex(**get_fiber_task_params(cmd_opts))
    ctx.obj["workflow_runner"](task)


@cli.command()
@add_click_options(DICHOTOMY_OPTIONS)
@click.pass_context
def dichotomy(ctx, **cmd_opts):
    """
    Run the dichotomy algorithm that will generate projections until they match the target mean
    connectivity (number of synapses per connections) for L4 PC cells
    """
    from projectionizer.dichotomy import SynapseCountMeanMinimizer

    setup_projection_workflow(**cmd_opts)
    task = SynapseCountMeanMinimizer(**get_dichotomy_task_params(cmd_opts))
    ctx.obj["workflow_runner"](task)


@cli.command()
@add_click_options(PROJECTIONS_OPTIONS)
@click.pass_context
def create_projections(ctx, **cmd_opts):
    """Generate new projections from scratch."""
    from projectionizer.step_3_write import RunAll

    setup_projection_workflow(**cmd_opts)
    task = RunAll(**get_projection_task_params(cmd_opts))
    ctx.obj["workflow_runner"](task)


@cli.command()
@add_click_options(PROJECTIONS_OPTIONS)
@click.pass_context
def volume_transmission(ctx, **cmd_opts):
    """Run a volume transmission projections job. This will also run the main workflow."""
    from projectionizer.volume_transmission import VolumeRunAll

    setup_projection_workflow(**cmd_opts)
    task = VolumeRunAll(**get_projection_task_params(cmd_opts))

    ctx.obj["workflow_runner"](task)


if __name__ == "__main__":
    cli(obj={})
