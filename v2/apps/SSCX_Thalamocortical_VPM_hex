#!/usr/bin/env python
import argparse
import logging
import os

from bluepy.api import Circuit

from examples.decorators import load_feather
from examples.SSCX_Thalamocortical_VPM_hex import create_projections

L = logging.getLogger(__name__)

BASE_CIRCUIT = '/gpfs/bbp.cscs.ch/project/proj1/circuits/SomatosensoryCxS1-v5.r0/O1/merged_circuit/'


def get_parser():
    '''return the argument parser'''
    parser = argparse.ArgumentParser()

    parser.add_argument('-o', '--output', default='.',
                        help='Output directory')
    parser.add_argument('-p', '--parallelize', action='store_true',
                        help='Output directory')
    parser.add_argument('-v', '--verbose', action='count', dest='verbose', default=0,
                        help='-v for INFO, -vv for DEBUG')
    parser.add_argument('-c', '--circuit', default=BASE_CIRCUIT,
                        help='Circuit path')
    subparsers = parser.add_subparsers(dest='action')

    build = subparsers.add_parser('build',
                                  help='Create nrn.h5, and intermediate files in `output`')

    analyse = subparsers.add_parser('analyse',
                                    help='analyse output')
    return parser


def main(args):
    logging.basicConfig(level=(logging.WARNING,
                               logging.INFO,
                               logging.DEBUG)[min(args.verbose, 2)])

    print('Using circuit: %s' % args.circuit)
    circuit = os.path.join(args.circuit, 'CircuitConfig')
    circuit = Circuit(circuit).v2
    # circuit._config['cells'] = '/gpfs/bbp.cscs.ch/project/proj30/mgevaert/SomatosensoryCxS1-v5.r0_circuit.mvd3'

    if args.action == 'build':
        create_projections(output=args.output, circuit=circuit, parallelize=args.parallelize)
    elif args.action == 'analyse':
        orig_data = ('/gpfs/bbp.cscs.ch/home/gevaert/private/src/'
                     'Projectionizer-v2/old_projections/ncsThalamocortical_VPM_tcS2F_2p6_ps.feather')
        orig_data = pd.read_feather(orig_data)

        keep_syn_path = os.path.join(output, 'keep_syn.feather')
        keep_syn = load_feather(keep_syn_path)

        create_plots(args.output)


if __name__ == '__main__':
    PARSER = get_parser()
    main(PARSER.parse_args())
