#!/usr/bin/env python
"""
You can run this example like this:
    .. code:: console
            $ luigi --module examples.hello_world examples.HelloWorldTask --local-scheduler
If that does not work, see :ref:`CommandLine`.
"""
import argparse
import logging
import os
import sys
from os.path import dirname, join, realpath
from shutil import copyfile

import luigi
import yaml

L = logging.getLogger(__name__)


def common_parser():
    '''return the argument parser'''
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-o', '--output', help='Output directory', required=True)
    parser.add_argument('-c', '--config',  default=None,
                        help='The projectionizer YAML config file. Must be passed when running the analysis for the first time. See templates/ folder for some examples')
    parser.add_argument('-l', '--no-local-scheduler',  action='store_true',
                        help='Do not use luigi\'s local scheduler (luigi daemon (luigid) must be running)')
    parser.add_argument('-d', '--dichotomy',  action='store_true',
                        help=('Run the dichotomy algorithm that will generate projections until '
                              'they match the target mean connectivity(number of synapses per connections) for L4 PC cells'))
    parser.add_argument('-t', '--connectivity-target',
                        help='The number of synpase per connection to reach with the dichotomy')
    parser.add_argument('-s', '--min-param',
                        help='Starting range of the dichotomy')
    parser.add_argument('-e', '--max-param',
                        help='End range of the dichotomy')
    parser.add_argument('-m', '--target-margin',
                        help='Tolerance of the dichotomy')

    return parser


def luigi_params(config, args):
    '''Prepare the list of parameters to be passed to luigi.run command'''
    with open(config) as configfile:
        config_list = yaml.load(configfile)

    cmd = list()
    for task, options in config_list.items():
        for option, value in options.items():
            prefix = task + '-' if task != 'CommonParams' else ''
            cmd += ['--' + prefix + option.replace('_', '-'), str(value)]

    if not args.no_local_scheduler:
        cmd.append('--local-scheduler')

    return cmd


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    parser = common_parser()
    args = parser.parse_args()

    config = join(args.output, 'config.yaml')

    if not os.path.exists(config):
        if not args.config:
            L.error('The --config is required if {} does not exists\n'
                    'Example config files can be found in the "templates" directory'.format(config))
            sys.exit(-1)
        L.debug('Copying the config in the output directory: {}'.format(args.output))
        try:
            os.makedirs(args.output)
        except:
            pass
        copyfile(args.config if args.config else join(dirname(realpath(__file__)), 'config.yaml'),
                 config)
    elif args.config:
        L.warning('Custom config: {} won\'t be used as {} already have a config file'.format(
            args.config, args.output))

    if args.dichotomy:
        cmd = ['Minimizer', '--folder', args.output, '--module',
               'projectionizer.dichotomy', '--workers', '1',
               '--Minimizer-target', args.connectivity_target,
               '--Minimizer-min-param', args.min_param,
               '--Minimizer-max-param', args.max_param,
               '--Minimizer-target-margin', args.target_margin]
    else:
        cmd = ['DoAll', '--folder', args.output, '--module',
               'projectionizer.analysis', '--workers', '1', ]

    cmd += luigi_params(config, args)
    L.debug('Calling luigi.run() with the following params: {}'.format(' '.join(cmd)))
    luigi.run(cmd)
